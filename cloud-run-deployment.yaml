# ==========================================
# Google Cloud Run Deployment Configuration
# ==========================================
# This file contains comprehensive Cloud Run deployment configurations
# for RaptorFlow application services

# ==========================================
# Backend Service Configuration
# ==========================================
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: raptorflow-backend
  namespace: default
  annotations:
    run.googleapis.com/ingress: all
    run.googleapis.com/ingress-status: all
    run.googleapis.com/creator: raptorflow-deployer
    run.googleapis.com/last-modifier: raptorflow-deployer
    run.googleapis.com/launch-stage: GA
    run.googleapis.com/client-name: gcloud
    run.googleapis.com/client-version: latest
  labels:
    app: raptorflow
    component: backend
    environment: production
    version: v1
spec:
  template:
    metadata:
      annotations:
        autoscaling.knative.dev/maxScale: "50"
        autoscaling.knative.dev/minScale: "2"
        autoscaling.knative.dev/scaleDownDelay: "120s"
        autoscaling.knative.dev/scaleDownRate: "10"
        autoscaling.knative.dev/scaleUpRate: "100"
        run.googleapis.com/cpu-throttling: "false"
        run.googleapis.com/execution-environment: gen2
        run.googleapis.com/gke-egress-all-traffic: "all"
        run.googleapis.com/memory-cpu-boost: "true"
        run.googleapis.com/startup-cpu-boost: "true"
        run.googleapis.com/vpc-access-connector: projects/raptorflow-project/locations/asia-south1/connectors/raptorflow-connector
        run.googleapis.com/vpc-access-egress: all-traffic
      labels:
        app: raptorflow
        component: backend
        environment: production
        version: v1
    spec:
      containerConcurrency: 80
      containers:
      - name: raptorflow-backend
        image: gcr.io/raptorflow-project/raptorflow-backend:latest
        ports:
        - containerPort: 8080
          protocol: TCP
        resources:
          limits:
            cpu: "4"
            memory: "4Gi"
          requests:
            cpu: "2"
            memory: "2Gi"
        env:
        # Application Configuration
        - name: PORT
          value: "8080"
        - name: HOST
          value: "0.0.0.0"
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: VERSION
          value: "v1.0.0"
        
        # Database Configuration
        - name: SUPABASE_URL
          valueFrom:
            secretKeyRef:
              name: supabase-credentials
              key: url
        - name: SUPABASE_KEY
          valueFrom:
            secretKeyRef:
              name: supabase-credentials
              key: anon-key
        - name: SUPABASE_SERVICE_KEY
          valueFrom:
            secretKeyRef:
              name: supabase-credentials
              key: service-key
        
        # AI API Keys
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-credentials
              key: openai-api-key
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-credentials
              key: gemini-api-key
        - name: PERPLEXITY_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-credentials
              key: perplexity-api-key
        
        # Payment Configuration
        - name: RAZORPAY_KEY_ID
          valueFrom:
            secretKeyRef:
              name: payment-credentials
              key: razorpay-key-id
        - name: RAZORPAY_KEY_SECRET
          valueFrom:
            secretKeyRef:
              name: payment-credentials
              key: razorpay-key-secret
        
        # Security Configuration
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: security-credentials
              key: jwt-secret-key
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: security-credentials
              key: encryption-key
        
        # Monitoring and Observability
        - name: ENABLE_METRICS
          value: "true"
        - name: ENABLE_TRACING
          value: "true"
        - name: PROMETHEUS_PORT
          value: "9090"
        
        # Performance Configuration
        - name: WORKERS
          value: "4"
        - name: THREADS
          value: "8"
        - name: MAX_CONNECTIONS
          value: "100"
        - name: CONNECTION_TIMEOUT
          value: "30"
        
        # Caching Configuration
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: url
        - name: CACHE_TTL
          value: "3600"
        
        # Rate Limiting
        - name: RATE_LIMIT_ENABLED
          value: "true"
        - name: RATE_LIMIT_REQUESTS
          value: "100"
        - name: RATE_LIMIT_WINDOW
          value: "60"
        
        # Health Check Configuration
        - name: HEALTH_CHECK_ENABLED
          value: "true"
        - name: HEALTH_CHECK_PATH
          value: "/health"
        
        # Startup and Liveness Configuration
        startupProbe:
          httpGet:
            path: /health/startup
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
        
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        # Security Context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
        
        # Volume Mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      
      # Service Account
      serviceAccountName: raptorflow-backend-sa
      
      # Timeout Configuration
      timeoutSeconds: 300

# ==========================================
# Frontend Service Configuration
# ==========================================
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: raptorflow-frontend
  namespace: default
  annotations:
    run.googleapis.com/ingress: all
    run.googleapis.com/ingress-status: all
    run.googleapis.com/creator: raptorflow-deployer
    run.googleapis.com/last-modifier: raptorflow-deployer
    run.googleapis.com/launch-stage: GA
    run.googleapis.com/client-name: gcloud
    run.googleapis.com/client-version: latest
  labels:
    app: raptorflow
    component: frontend
    environment: production
    version: v1
spec:
  template:
    metadata:
      annotations:
        autoscaling.knative.dev/maxScale: "20"
        autoscaling.knative.dev/minScale: "2"
        autoscaling.knative.dev/scaleDownDelay: "60s"
        autoscaling.knative.dev/scaleDownRate: "10"
        autoscaling.knative.dev/scaleUpRate: "100"
        run.googleapis.com/cpu-throttling: "false"
        run.googleapis.com/execution-environment: gen2
        run.googleapis.com/gke-egress-all-traffic: "all"
        run.googleapis.com/memory-cpu-boost: "true"
        run.googleapis.com/startup-cpu-boost: "true"
      labels:
        app: raptorflow
        component: frontend
        environment: production
        version: v1
    spec:
      containerConcurrency: 100
      containers:
      - name: raptorflow-frontend
        image: gcr.io/raptorflow-project/raptorflow-frontend:latest
        ports:
        - containerPort: 3000
          protocol: TCP
        resources:
          limits:
            cpu: "2"
            memory: "2Gi"
          requests:
            cpu: "1"
            memory: "1Gi"
        env:
        # Application Configuration
        - name: PORT
          value: "3000"
        - name: HOSTNAME
          value: "0.0.0.0"
        - name: NODE_ENV
          value: "production"
        - name: VERSION
          value: "v1.0.0"
        
        # API Configuration
        - name: NEXT_PUBLIC_API_URL
          value: "https://raptorflow-backend-xxxxx.a.run.app"
        - name: NEXT_PUBLIC_APP_NAME
          value: "RaptorFlow"
        - name: NEXT_PUBLIC_APP_VERSION
          value: "v1.0.0"
        
        # Analytics and Monitoring
        - name: NEXT_PUBLIC_GA_ID
          valueFrom:
            secretKeyRef:
              name: analytics-credentials
              key: google-analytics-id
        - name: NEXT_PUBLIC_SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: monitoring-credentials
              key: sentry-dsn
        
        # Feature Flags
        - name: NEXT_PUBLIC_ENABLE_ANALYTICS
          value: "true"
        - name: NEXT_PUBLIC_ENABLE_ERROR_REPORTING
          value: "true"
        - name: NEXT_PUBLIC_ENABLE_PERFORMANCE_MONITORING
          value: "true"
        
        # Security Configuration
        - name: NEXT_PUBLIC_ENABLE_CSP
          value: "true"
        - name: NEXT_PUBLIC_API_TIMEOUT
          value: "30000"
        
        # Startup and Liveness Configuration
        startupProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
        
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        # Security Context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
        
        # Volume Mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/.next/cache
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      
      # Service Account
      serviceAccountName: raptorflow-frontend-sa
      
      # Timeout Configuration
      timeoutSeconds: 60

# ==========================================
# Staging Environment Configuration
# ==========================================
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: raptorflow-backend-staging
  namespace: default
  annotations:
    run.googleapis.com/ingress: all
    run.googleapis.com/ingress-status: all
    run.googleapis.com/creator: raptorflow-deployer
    run.googleapis.com/last-modifier: raptorflow-deployer
    run.googleapis.com/launch-stage: GA
  labels:
    app: raptorflow
    component: backend
    environment: staging
    version: v1
spec:
  template:
    metadata:
      annotations:
        autoscaling.knative.dev/maxScale: "10"
        autoscaling.knative.dev/minScale: "1"
        autoscaling.knative.dev/scaleDownDelay: "30s"
        run.googleapis.com/cpu-throttling: "true"
        run.googleapis.com/execution-environment: gen2
      labels:
        app: raptorflow
        component: backend
        environment: staging
        version: v1
    spec:
      containerConcurrency: 60
      containers:
      - name: raptorflow-backend-staging
        image: gcr.io/raptorflow-project/raptorflow-backend:staging
        ports:
        - containerPort: 8080
          protocol: TCP
        resources:
          limits:
            cpu: "2"
            memory: "2Gi"
          requests:
            cpu: "1"
            memory: "1Gi"
        env:
        - name: PORT
          value: "8080"
        - name: HOST
          value: "0.0.0.0"
        - name: ENVIRONMENT
          value: "staging"
        - name: LOG_LEVEL
          value: "DEBUG"
        - name: VERSION
          value: "staging"
        
        # Use staging secrets
        - name: SUPABASE_URL
          valueFrom:
            secretKeyRef:
              name: supabase-staging-credentials
              key: url
        - name: SUPABASE_KEY
          valueFrom:
            secretKeyRef:
              name: supabase-staging-credentials
              key: anon-key
        
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-staging-credentials
              key: openai-api-key
        
        # Reduced performance for staging
        - name: WORKERS
          value: "2"
        - name: THREADS
          value: "4"
        - name: MAX_CONNECTIONS
          value: "50"
        
        startupProbe:
          httpGet:
            path: /health/startup
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
      
      serviceAccountName: raptorflow-staging-sa
      timeoutSeconds: 300

---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: raptorflow-frontend-staging
  namespace: default
  annotations:
    run.googleapis.com/ingress: all
    run.googleapis.com/ingress-status: all
    run.googleapis.com/creator: raptorflow-deployer
    run.googleapis.com/last-modifier: raptorflow-deployer
    run.googleapis.com/launch-stage: GA
  labels:
    app: raptorflow
    component: frontend
    environment: staging
    version: v1
spec:
  template:
    metadata:
      annotations:
        autoscaling.knative.dev/maxScale: "5"
        autoscaling.knative.dev/minScale: "1"
        autoscaling.knative.dev/scaleDownDelay: "30s"
        run.googleapis.com/cpu-throttling: "true"
        run.googleapis.com/execution-environment: gen2
      labels:
        app: raptorflow
        component: frontend
        environment: staging
        version: v1
    spec:
      containerConcurrency: 100
      containers:
      - name: raptorflow-frontend-staging
        image: gcr.io/raptorflow-project/raptorflow-frontend:staging
        ports:
        - containerPort: 3000
          protocol: TCP
        resources:
          limits:
            cpu: "1"
            memory: "1Gi"
          requests:
            cpu: "0.5"
            memory: "512Mi"
        env:
        - name: PORT
          value: "3000"
        - name: HOSTNAME
          value: "0.0.0.0"
        - name: NODE_ENV
          value: "staging"
        - name: VERSION
          value: "staging"
        
        - name: NEXT_PUBLIC_API_URL
          value: "https://raptorflow-backend-staging-xxxxx.a.run.app"
        - name: NEXT_PUBLIC_APP_NAME
          value: "RaptorFlow (Staging)"
        - name: NEXT_PUBLIC_APP_VERSION
          value: "staging"
        
        startupProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
      
      serviceAccountName: raptorflow-staging-sa
      timeoutSeconds: 60

# ==========================================
# Service Account Configurations
# ==========================================
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: raptorflow-backend-sa
  namespace: default
  annotations:
    iam.gke.io/gcp-service-account: raptorflow-backend@raptorflow-project.iam.gserviceaccount.com
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: raptorflow-frontend-sa
  namespace: default
  annotations:
    iam.gke.io/gcp-service-account: raptorflow-frontend@raptorflow-project.iam.gserviceaccount.com
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: raptorflow-staging-sa
  namespace: default
  annotations:
    iam.gke.io/gcp-service-account: raptorflow-staging@raptorflow-project.iam.gserviceaccount.com

# ==========================================
# Network Configuration
# ==========================================
---
apiVersion: v1
kind: Service
metadata:
  name: raptorflow-backend-internal
  namespace: default
  annotations:
    cloud.google.com/load-balancer-type: "Internal"
  labels:
    app: raptorflow
    component: backend
    environment: production
spec:
  type: LoadBalancer
  selector:
    app: raptorflow
    component: backend
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
  loadBalancerSourceRanges:
  - 10.0.0.0/8
  - 172.16.0.0/12
  - 192.168.0.0/16

# ==========================================
# Autoscaling Configuration
# ==========================================
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: raptorflow-backend-hpa
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: serving.knative.dev/v1
    kind: Service
    name: raptorflow-backend
  minReplicas: 2
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 120
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 4
        periodSeconds: 15
      selectPolicy: Max

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: raptorflow-frontend-hpa
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: serving.knative.dev/v1
    kind: Service
    name: raptorflow-frontend
  minReplicas: 2
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      selectPolicy: Max

# ==========================================
# Monitoring and Logging Configuration
# ==========================================
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: raptorflow-monitoring-config
  namespace: default
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "raptorflow_rules.yml"
    
    scrape_configs:
      - job_name: 'raptorflow-backend'
        static_configs:
          - targets: ['raptorflow-backend:9090']
        metrics_path: /metrics
        scrape_interval: 15s
      
      - job_name: 'raptorflow-frontend'
        static_configs:
          - targets: ['raptorflow-frontend:3000']
        metrics_path: /api/metrics
        scrape_interval: 30s
  
  raptorflow_rules.yml: |
    groups:
    - name: raptorflow.rules
      rules:
      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "High error rate detected"
          description: "Error rate is {{ $value }} errors per second"
      
      - alert: HighResponseTime
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 1
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High response time detected"
          description: "95th percentile response time is {{ $value }} seconds"
      
      - alert: MemoryUsageHigh
        expr: container_memory_usage_bytes / container_spec_memory_limit_bytes > 0.9
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage"
          description: "Memory usage is {{ $value }}% of limit"
      
      - alert: CPUUsageHigh
        expr: rate(container_cpu_usage_seconds_total[5m]) > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High CPU usage"
          description: "CPU usage is {{ $value }}%"

# ==========================================
# Security Configuration
# ==========================================
---
apiVersion: networking.gke.io/v1
kind: GCPBackendConfig
metadata:
  name: raptorflow-backend-config
  namespace: default
spec:
  healthCheck:
    checkIntervalSec: 10
    timeoutSec: 5
    healthyThreshold: 2
    unhealthyThreshold: 3
    type: HTTP
    requestPath: /health
  securityPolicy:
    name: raptorflow-security-policy

---
apiVersion: networking.gke.io/v1
kind: GCPBackendConfig
metadata:
  name: raptorflow-frontend-config
  namespace: default
spec:
  healthCheck:
    checkIntervalSec: 10
    timeoutSec: 5
    healthyThreshold: 2
    unhealthyThreshold: 3
    type: HTTP
    requestPath: /api/health
  securityPolicy:
    name: raptorflow-security-policy

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: raptorflow-network-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: raptorflow
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - namespaceSelector:
        matchLabels:
          name: knative-serving
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 3000
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
