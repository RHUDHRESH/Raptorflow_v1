# ==========================================
# Production-Optimized Multi-Stage Dockerfile
# ==========================================
# Optimized for Google Cloud Run and production deployment
# Supports both backend and frontend builds

# ==========================================
# Base Builder Stage
# ==========================================
FROM python:3.11-slim as base-builder

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# ==========================================
# Backend Builder Stage
# ==========================================
FROM base-builder as backend-builder

WORKDIR /app/backend

# Copy Python requirements
COPY backend/requirements.txt backend/requirements-dev.txt ./

# Install Python dependencies
RUN pip install --user --no-cache-dir -r requirements.txt

# Copy backend source code
COPY backend/ .

# Create non-root user
RUN useradd -m -u 1000 appuser && \
    chown -R appuser:appuser /app

# ==========================================
# Frontend Builder Stage
# ==========================================
FROM node:20-alpine as frontend-builder

WORKDIR /app/frontend

# Copy package files
COPY frontend/package*.json ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy frontend source code
COPY frontend/ .

# Build frontend application
RUN npm run build

# ==========================================
# Backend Production Stage
# ==========================================
FROM python:3.11-slim as backend-production

# Set labels
LABEL maintainer="RaptorFlow Team <team@raptorflow.com>" \
      version="1.0.0" \
      description="RaptorFlow Backend - Production" \
      org.opencontainers.image.title="RaptorFlow Backend" \
      org.opencontainers.image.description="AI-powered marketing automation backend" \
      org.opencontainers.image.version="1.0.0" \
      org.opencontainers.image.vendor="RaptorFlow" \
      org.opencontainers.image.licenses="MIT"

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/root/.local/bin:$PATH" \
    PORT=8080 \
    HOST=0.0.0.0 \
    ENVIRONMENT=production \
    LOG_LEVEL=INFO

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    libpq5 \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy Python dependencies from builder
COPY --from=backend-builder /root/.local /root/.local

# Copy application code
COPY --from=backend-builder --chown=appuser:appuser /app/backend /app

# Create necessary directories
RUN mkdir -p /app/cache /app/logs /app/tmp && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Set working directory
WORKDIR /app

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Expose port
EXPOSE 8080

# Start command
CMD exec gunicorn app.main:app \
    --bind 0.0.0.0:${PORT} \
    --workers 4 \
    --threads 8 \
    --worker-class uvicorn.workers.UvicornWorker \
    --worker-connections 1000 \
    --max-requests 1000 \
    --max-requests-jitter 100 \
    --timeout 120 \
    --keep-alive 5 \
    --access-logfile - \
    --error-logfile - \
    --log-level info \
    --capture-output

# ==========================================
# Frontend Production Stage
# ==========================================
FROM node:20-alpine as frontend-production

# Set labels
LABEL maintainer="RaptorFlow Team <team@raptorflow.com>" \
      version="1.0.0" \
      description="RaptorFlow Frontend - Production" \
      org.opencontainers.image.title="RaptorFlow Frontend" \
      org.opencontainers.image.description="AI-powered marketing automation frontend" \
      org.opencontainers.image.version="1.0.0" \
      org.opencontainers.image.vendor="RaptorFlow" \
      org.opencontainers.image.licenses="MIT"

# Set environment variables
ENV NODE_ENV=production \
    PORT=3000 \
    HOSTNAME=0.0.0.0 \
    NEXT_TELEMETRY_DISABLED=1 \
    NPM_CONFIG_LOGLEVEL=warn \
    NPM_CONFIG_PROGRESS=false

# Install runtime dependencies
RUN apk add --no-cache \
    curl \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Copy built application from builder
COPY --from=frontend-builder --chown=nextjs:nodejs /app/frontend/.next/standalone ./
COPY --from=frontend-builder --chown=nextjs:nodejs /app/frontend/.next/static ./.next/static
COPY --from=frontend-builder --chown=nextjs:nodejs /app/frontend/public ./public

# Create necessary directories
RUN mkdir -p /app/.next/cache && \
    chown -R nextjs:nodejs /app

# Switch to non-root user
USER nextjs

# Set working directory
WORKDIR /app

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:${PORT}/api/health || exit 1

# Expose port
EXPOSE 3000

# Start command
CMD ["node", "server.js"]

# ==========================================
# Security-Scanned Production Stage
# ==========================================
FROM python:3.11-slim as backend-security

# Security-focused labels
LABEL security.scan.completed="true" \
      security.scan.tool="trivy" \
      security.scan.date="2024-01-01" \
      security.base-image="python:3.11-slim"

# Set environment variables for security
ENV PYTHONHASHSEED=random \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Install security tools and minimal dependencies
RUN apt-get update && apt-get install -y \
    curl \
    libpq5 \
    postgresql-client \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && find /var/log -type f -delete || true

# Copy from backend production
COPY --from=backend-production /root/.local /root/.local
COPY --from=backend-production --chown=appuser:appuser /app /app

# Security hardening
RUN useradd -m -u 1000 appuser && \
    chown -R appuser:appuser /app && \
    chmod -R 755 /app && \
    find /app -type f -name "*.py" -exec chmod 644 {} \; && \
    chmod +x /app/entrypoint.sh || true

# Create security-focused entrypoint
RUN echo '#!/bin/bash\n\
set -euo pipefail\n\
\
# Security checks\n\
if [[ "${ENVIRONMENT}" == "production" ]]; then\n\
    echo "Running in production mode with security checks"\n\
    # Additional security validations can be added here\n\
fi\n\
\
exec "$@"' > /app/entrypoint.sh && \
chmod +x /app/entrypoint.sh

USER appuser
WORKDIR /app

ENTRYPOINT ["/app/entrypoint.sh"]
CMD exec gunicorn app.main:app \
    --bind 0.0.0.0:${PORT} \
    --workers 4 \
    --threads 8 \
    --worker-class uvicorn.workers.UvicornWorker \
    --timeout 120 \
    --keep-alive 5 \
    --log-level info

# ==========================================
# Multi-Architecture Support
# ==========================================
FROM --platform=linux/amd64 backend-production as backend-amd64
FROM --platform=linux/arm64 backend-production as backend-arm64

FROM --platform=linux/amd64 frontend-production as frontend-amd64
FROM --platform=linux/arm64 frontend-production as frontend-arm64

# ==========================================
# Development Variant
# ==========================================
FROM backend-production as backend-development

# Override environment for development
ENV ENVIRONMENT=development \
    LOG_LEVEL=DEBUG \
    RELOAD=true

# Install development dependencies
RUN pip install --user --no-cache-dir pytest pytest-asyncio httpx

# Copy test files
COPY backend/tests /app/tests

# Development start command
CMD exec uvicorn app.main:app \
    --host 0.0.0.0 \
    --port ${PORT} \
    --reload \
    --log-level debug

# ==========================================
# Testing Stage
# ==========================================
FROM backend-builder as backend-testing

# Copy test files
COPY backend/tests /app/tests

# Install testing dependencies
RUN pip install --user --no-cache-dir pytest pytest-asyncio pytest-cov httpx

# Run tests
RUN python -m pytest tests/ -v --cov=app --cov-report=term-missing

# ==========================================
# Documentation Stage
# ==========================================
FROM backend-builder as backend-docs

# Install documentation dependencies
RUN pip install --user --no-cache-dir sphinx sphinx-rtd-theme

# Copy documentation source
COPY docs /app/docs

# Build documentation
RUN cd docs && make html

# ==========================================
# Final Production Images
# ==========================================
# Use these as the final images for deployment
# Backend: backend-production or backend-security
# Frontend: frontend-production

# Build commands:
# Backend: docker build --target backend-production -t raptorflow-backend:latest .
# Frontend: docker build --target frontend-production -t raptorflow-frontend:latest .
# Security: docker build --target backend-security -t raptorflow-backend:secure .
# Multi-arch: docker buildx build --platform linux/amd64,linux/arm64 --target backend-production -t raptorflow-backend:latest .
