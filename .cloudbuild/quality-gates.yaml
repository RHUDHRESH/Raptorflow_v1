# Google Cloud Build configuration for quality gates
# This is an alternative to GitHub Actions for teams using GCP exclusively
#
# To use this:
# 1. Set up a Cloud Build trigger connected to your repository
# 2. Configure trigger to run on pull requests
# 3. Point to this file as the build configuration

steps:
  # =====================================================
  # Backend Quality Checks
  # =====================================================

  - name: 'python:3.10-slim'
    id: 'backend-install'
    dir: 'backend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üì¶ Installing backend dependencies..."
        pip install --no-cache-dir -q -r requirements.txt -r requirements-dev.txt
        echo "‚úì Dependencies installed"
    waitFor: ['-']

  - name: 'python:3.10-slim'
    id: 'backend-ruff-lint'
    dir: 'backend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîç Running Ruff linter..."
        pip install -q ruff==0.1.9
        ruff check .
        echo "‚úì Linting passed"
    waitFor: ['backend-install']

  - name: 'python:3.10-slim'
    id: 'backend-ruff-format'
    dir: 'backend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üìù Checking code formatting..."
        pip install -q ruff==0.1.9
        ruff format --check .
        echo "‚úì Formatting check passed"
    waitFor: ['backend-install']

  - name: 'python:3.10-slim'
    id: 'backend-mypy'
    dir: 'backend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîé Running type checking..."
        pip install -q mypy==1.7.1
        mypy . --config-file=../pyproject.toml || echo "‚ö†Ô∏è  Type checking warnings present"
        echo "‚úì Type checking complete"
    waitFor: ['backend-install']

  - name: 'python:3.10-slim'
    id: 'backend-tests'
    dir: 'backend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üß™ Running backend tests..."
        pip install -q pytest pytest-asyncio pytest-cov
        pytest --cov=. --cov-report=term-missing --cov-report=xml
        echo "‚úì Tests passed"
    env:
      - 'SUPABASE_URL=${_SUPABASE_URL}'
      - 'SUPABASE_KEY=${_SUPABASE_KEY}'
    waitFor: ['backend-install']

  - name: 'python:3.10-slim'
    id: 'backend-security'
    dir: 'backend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîí Running security scans..."
        pip install -q bandit safety
        bandit -r . -f json -o bandit-report.json || echo "‚ö†Ô∏è  Security warnings found"
        safety check --json || echo "‚ö†Ô∏è  Dependency vulnerabilities found"
        echo "‚úì Security scan complete"
    waitFor: ['backend-install']

  # =====================================================
  # Frontend Quality Checks
  # =====================================================

  - name: 'node:20-slim'
    id: 'frontend-install'
    dir: 'frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üì¶ Installing frontend dependencies..."
        npm ci --silent
        echo "‚úì Dependencies installed"
    waitFor: ['-']

  - name: 'node:20-slim'
    id: 'frontend-typecheck'
    dir: 'frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîé Running TypeScript type checking..."
        npm run type-check
        echo "‚úì Type checking passed"
    waitFor: ['frontend-install']

  - name: 'node:20-slim'
    id: 'frontend-lint'
    dir: 'frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîç Running ESLint..."
        npm run lint
        echo "‚úì Linting passed"
    waitFor: ['frontend-install']

  - name: 'node:20-slim'
    id: 'frontend-prettier'
    dir: 'frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üìù Checking code formatting..."
        npm run format:check
        echo "‚úì Formatting check passed"
    waitFor: ['frontend-install']

  - name: 'node:20-slim'
    id: 'frontend-tests'
    dir: 'frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üß™ Running frontend tests..."
        npm run test:coverage
        echo "‚úì Tests passed"
    waitFor: ['frontend-install']

  # =====================================================
  # E2E Tests (Optional - can be slow)
  # =====================================================

  - name: 'mcr.microsoft.com/playwright:v1.40.1-focal'
    id: 'frontend-e2e'
    dir: 'frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üé≠ Running E2E tests..."
        npm ci --silent
        npx playwright test
        echo "‚úì E2E tests passed"
    env:
      - 'NEXT_PUBLIC_API_URL=${_BACKEND_URL}'
    waitFor: ['-']  # Run in parallel with other tests

  # =====================================================
  # Summary
  # =====================================================

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'summary'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "=========================================="
        echo "‚úì All Quality Checks Passed!"
        echo "=========================================="
        echo ""
        echo "Backend:"
        echo "  ‚úì Linting (Ruff)"
        echo "  ‚úì Formatting (Ruff)"
        echo "  ‚úì Type Checking (mypy)"
        echo "  ‚úì Tests (pytest)"
        echo "  ‚úì Security Scans"
        echo ""
        echo "Frontend:"
        echo "  ‚úì Type Checking (tsc)"
        echo "  ‚úì Linting (ESLint)"
        echo "  ‚úì Formatting (Prettier)"
        echo "  ‚úì Tests (Jest)"
        echo "  ‚úì E2E Tests (Playwright)"
        echo ""
        echo "Build ID: $BUILD_ID"
        echo "=========================================="
    waitFor:
      - 'backend-ruff-lint'
      - 'backend-ruff-format'
      - 'backend-mypy'
      - 'backend-tests'
      - 'backend-security'
      - 'frontend-typecheck'
      - 'frontend-lint'
      - 'frontend-prettier'
      - 'frontend-tests'
      - 'frontend-e2e'

# Artifacts to save
artifacts:
  objects:
    location: 'gs://${_ARTIFACTS_BUCKET}/quality-reports/${BUILD_ID}'
    paths:
      - 'backend/coverage.xml'
      - 'backend/bandit-report.json'
      - 'frontend/coverage/coverage-final.json'

# Build options
options:
  machineType: 'E2_HIGHCPU_8'
  substitutionOption: 'ALLOW_LOOSE'
  logging: 'CLOUD_LOGGING_ONLY'

# Timeout for the entire build
timeout: '1800s'  # 30 minutes

# Substitution variables (configure in trigger)
substitutions:
  _SUPABASE_URL: 'your-supabase-url'
  _SUPABASE_KEY: 'your-supabase-key'
  _BACKEND_URL: 'http://localhost:8000'
  _ARTIFACTS_BUCKET: 'your-artifacts-bucket'
